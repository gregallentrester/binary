
<!--
     General purpose build script for web apps/web services, includes 
     enhanced support for deploying directly to a Tomcat server.

     Assumes that the source code of your web app is organized into the 
     following subdirectories underneath the source code directory 
     from which you execute the build script:

        docs   Static documentation files, copied to the 
               "docs" subdirectory of your distribution.

        src    Java source code (and associated resource 
               files) compiled to the "WEB-INF/classes"
               subdirectory of your web app.

        web    Static HTML, JSP, other content (such as image
               files), including the WEB-INF subdirectory and
               its configuration file contents.
-->

<!-- 
     A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested;
     the "basedir" attribute defines the current working directory
     from which Ant executes the requested task - this is normally
     set to the current working directory.
-->

<project name="My Project" default="compile" basedir=".">


<!-- ===================== Property Definitions =========================== -->

<!--
  Each of the following properties are used in the build script.
  Values for these properties are set in the first place they are
  defined, from the following list:

    - Definitions on the "ant" command line (ant -Dfoo=bar compile).

    - Definitions from a "build.properties" file in the top level
      source directory of this application.

    - Definitions from a "build.properties" file in the developer's
      home directory.

    - Default definitions in this build.xml file.

  Property values can be composed based on the contents of previously-
  defined properties.  This technique helps to minimize the number of 
  changes required when your development environment is modified.  
  Note that property composition is allowed within "build.properties" 
  files as well as in the "build.xml" script.
-->

  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>


<!-- ==================== File and Directory Names ======================== -->

<!--
  These properties generally define file/directory names (or paths) 
  which affect where the build process stores its output.

  app.name           Base name of app (default: "myapp"), 
                     constructs filenames and directories.

  app.path           Context path to which app is deployed;
                     defaults to "/" plus the value of the 
                     "app.name" property.

  app.version        Version number of this iteration of the app.

  build.home         The directory into which the "prepare" and
                     "compile" targets generate their output;
                     defaults to "build".

  catalina.home      The directory in which you've installed
                     a binary distribution of Tomcat; used 
                     by the "deploy" target.

  dist.home          The name of the base directory in which
                     distribution files are created; defaults 
                     to "dist".

  manager.password   The login password for a user assigned 
                     the "manager-script" role; this user can 
                     execute commands via the "/manager" web app.

  manager.url        The URL of the "/manager" web app to which 
                     are deployed web apps/web services.

  manager.username   The login username for a user assigned 
                     the "manager-script" role; user can execute
                     commands via the "/manager" web app.
-->

  <property name="app.name"       value="myapp"/>
  <property name="app.path"       value="/${app.name}"/>
  <property name="app.version"    value="0.1-dev"/>
  <property name="build.home"     value="${basedir}/build"/>
  <property name="catalina.home"  value="../../../.."/> <!-- UPDATE THIS! -->
  <property name="dist.home"      value="${basedir}/dist"/>
  <property name="docs.home"      value="${basedir}/docs"/>
  <property name="manager.url"    value="http://localhost:8080/manager/text"/>
  <property name="src.home"       value="${basedir}/src"/>
  <property name="web.home"       value="${basedir}/web"/>


<!-- ==================== External Dependencies =========================== -->

<!--
  Use property values to define the locations of external JAR files on which
  your application will depend.  In general, these values will be used for:

    - Inclusion on the classpath that is passed to the Javac compiler.

    - Being copied into the "/WEB-INF/lib" directory during execution
      of the "deploy" target.

  Tomcat automatically includes all of the Java classes that are exposed to
  web apps, we'll not need to explicitly list any of those as dependencies.  
  External dependencies for JAR files that you are going to include inside 
  your "/WEB-INF/lib" directory must be listed.
-->

<!-- Dummy external dependency -->
<!--
  <property name="foo.jar" value="/path/to/foo.jar"/>
-->


<!-- ==================== Compilation Classpath =========================== -->

<!--
  Rather than relying on the CLASSPATH environment variable, Ant dynamically
  constructs the classpath for each compilation.  The example below constructs 
  the compile classpath to include the servlet.jar file, as well as the other 
  components that Tomcat automatically makes available to web apps, along with 
  anything that you explicitly add.
-->

  <path id="compile.classpath">

  <!-- Include all JAR files that will be included in /WEB-INF/lib.
       *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
<!--
    <pathelement location="${foo.jar}"/>
-->

    <!-- Include all elements that Tomcat exposes to applications -->
    <fileset dir="${catalina.home}/bin">
      <include name="*.jar"/>
    </fileset>
    <pathelement location="${catalina.home}/lib"/>
    <fileset dir="${catalina.home}/lib">
      <include name="*.jar"/>
    </fileset>

  </path>


<!-- ================== Custom Ant Task Definitions ======================= -->

<!--
  These properties define custom tasks for the Ant build tool that interact
  with the "/manager" web app installed with Tomcat.  So that they can be
  successfully utilized, perform the following steps:

    - Copy the file "lib/catalina-ant.jar" from your Tomcat
      installation into the "lib" directory of your Ant installation.

    - Create a "build.properties" file in your application's top-level
      source directory (or your user login home directory) that defines
      appropriate values for the "manager.password", "manager.url", and
      "manager.username" properties described above.

    For more information about the Manager web app, and the functionality
    of these tasks, see <http://localhost:8080/tomcat-docs/manager-howto.html>.
-->

  <taskdef resource="org/apache/catalina/ant/catalina.tasks"
           classpathref="compile.classpath"/>


<!--  ==================== Compilation Control Options ==================== -->

<!--
  These properties control option settings on the Javac 
  compiler when it is invoked using the <javac> task.

    - compile.debug        Should compilation include the debug option?

    - compile.deprecation  Should compilation include the deprecation option?
-->

  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="false"/>


<!-- ==================== All Target ====================================== -->

<!--
  The "all" target combines the "clean" target and  
  the "compile" target, forcing a complete recompile.
-->

  <target name="all" depends="clean,compile">


<!-- ==================== Clean Target ==================================== -->

<!--
  The "clean" target deletes any previous "build" and "dist" 
  directories, ensuring that the app is built from scratch.
-->

  <target name="clean"
   description="Delete old build and dist directories">
    <delete dir="${build.home}"/>
    <delete dir="${dist.home}"/>
  </target>


<!-- ==================== Compile Target ================================== -->

<!--
  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
  Example assumes that you will be including your classes in an unpacked 
  directory hierarchy under "/WEB-INF/classes".
-->

  <target name="compile" depends="prepare">

    <!-- Compile Java classes as necessary -->
    <mkdir    dir="${build.home}/WEB-INF/classes"/>
    <javac srcdir="${src.home}"
          destdir="${build.home}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}">
        <classpath refid="compile.classpath"/>
    </javac>

    <!-- Copy application resources -->
    <copy  todir="${build.home}/WEB-INF/classes">
      <fileset dir="${src.home}" excludes="**/*.java"/>
    </copy>
  </target>


<!-- ==================== Dist Target ===================================== -->

<!--
  The "dist" target creates a binary distribution of your app in  
  directory structure, ready to be archived in a tar.gz file or 
  a zip file.  Note that this target depends on two others:

   - "compile" so that the entire web app (including 
     external dependencies) are assembled

   - "javadoc" so that the app's Javadocs get created
-->

  <target name="dist" depends="compile,javadoc">
    <!-- Copy documentation subdirectories -->
    <mkdir dir="${dist.home}/docs"/>
    <copy  todir="${dist.home}/docs">
      <fileset dir="${docs.home}"/>
    </copy>

    <!-- Create application JAR file -->
    <jar jarfile="${dist.home}/${app.name}-${app.version}.war"
         basedir="${build.home}"/>

    <!-- Copy additional files to ${dist.home} as necessary -->
  </target>


<!-- ==================== Install Target ================================== -->

<!--
  The "install" target dynamically installs this web app and makes it 
  available for execution.  It does *not* cause the existence of this 
  web app to be remembered across Tomcat restarts; if you restart the 
  server, you'll need to re-install thw  web app.

  If you've already installed this app, and simply want Tomcat to 
  recognize that you've updated Java classes (or the web.xml file), 
  use the "reload" target instead.

  NOTE:  This target only succeeds if it's run from 
         the same server on which Tomcat is running.

  NOTE:  This is the logical opposite of the "remove" target.
-->

  <target name="install" depends="compile">
    <deploy url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"
       localWar="file://${build.home}"/>
  </target>


<!-- ==================== Javadoc Target ================================== -->

<!--
  The "javadoc" target creates Javadoc API documentation for the Java
  classes included in your app.  Normally, this is only required when
  preparing a distribution release, but it is available as a separate
  target in case the developer wants to create Javadocs independently.
-->

  <target name="javadoc" depends="compile">
    <mkdir dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${src.home}"
                destdir="${dist.home}/docs/api"
           packagenames="*">
      <classpath refid="compile.classpath"/>
    </javadoc>
  </target>


<!-- ====================== List Target =================================== -->

<!--
  The "list" target lists the currently-running web apps, either loaded 
  at startup time or installed dynamically; determines whether the app
  you are currently developing has been installed.
-->

  <target name="list">
    <list    url="${manager.url}"
        username="${manager.username}"
        password="${manager.password}"/>
  </target>


<!-- ==================== Prepare Target ================================== -->

<!--
  The "prepare" target creates the "build" destination directory, and 
  copies the static contents of your web app into it.  If you need to 
  copy static files from external dependencies, customize the contents 
  of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">
    <!-- Create build directories as needed -->
    <mkdir  dir="${build.home}"/>
    <mkdir  dir="${build.home}/WEB-INF"/>
    <mkdir  dir="${build.home}/WEB-INF/classes"/>

    <!-- Copy static content of this web application -->
    <copy todir="${build.home}">
      <fileset dir="${web.home}"/>
    </copy>

    <!-- Copy external dependencies as required -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
    <mkdir  dir="${build.home}/WEB-INF/lib"/>
    <!--
    <copy todir="${build.home}/WEB-INF/lib" file="${foo.jar}"/>
    -->

    <!-- Copy static files from external dependencies as needed -->
    <!-- *** CUSTOMIZE HERE AS REQUIRED BY YOUR APPLICATION *** -->
  </target>


<!-- ==================== Reload Target =================================== -->

<!--
  The "reload" target signals the specified app on Tomcat to shut itself 
  down and reload.  Useful when the web app context is not reloadable and
  you've updated classes or property files in the /WEB-INF/classes directory,
  or when you've added or updated JAR files in the /WEB-INF/lib directory.

  NOTE:  The /WEB-INF/web.xml web app configuration file is not reread on
         a reload.  If you've made changes to your web.xml file, you must 
         stop, then restart the web app.
-->

  <target name="reload" depends="compile">
    <reload url="${manager.url}"
       username="${manager.username}"
       password="${manager.password}"
           path="${app.path}"/>
  </target>


<!-- ==================== Remove Target =================================== -->

<!--
  The "remove" target dynamically removes this web app from service.

  NOTE:  This is the logical opposite of the "install" target.
-->

  <target name="remove">
    <undeploy url="${manager.url}"
         username="${manager.username}"
         password="${manager.password}"
             path="${app.path}"/>
  </target>

</project>
